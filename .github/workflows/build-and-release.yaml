name: Lint, Test, Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write   # required for release publishing

jobs:
  # ------------------------
  # Full checks â€” on push to main OR PR to main
  # ------------------------
  full-lint-and-test:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Compile requirements
        run: |
          pip-compile --extra dev pyproject.toml --output-file=requirements.txt

      - name: Install fast dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8 black mypy pytest

      - name: Run flake8
        run: flake8 src

      - name: Run black check
        run: black --check src

      - name: Run mypy
        run: mypy --ignore-missing-imports src

      - name: Run unit tests
        run: pytest -q tests/unit

      - name: Run integration tests
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: pytest -q tests/integration

      - name: Run Super-Linter
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: github/super-linter@v5
        env:
          VALIDATE_PYTHON_MYPY: true
          PYTHON_MYPY_ARGS: "--no-install-types --ignore-missing-imports"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ------------------------
  # Build & Release
  # ------------------------
  build-and-release:
    runs-on: windows-latest
    needs: full-lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pip-tools

      - name: Compile requirements
        run: |
          pip-compile pyproject.toml --output-file=requirements.txt

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build .exe with PyInstaller
        run: |
          pyinstaller --onefile --name "Case Y" main.py

      - name: Prepare artifact (zip exe)
        run: |
          if (Test-Path "./dist/Case Y.exe") {
            Compress-Archive -Path "./dist/Case Y.exe" -DestinationPath "./dist/Case-Y-v${{ github.run_number }}.zip"
          } else {
            Write-Error "Expected dist/Case Y.exe not found"
          }

      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}b
          name: Release v${{ github.run_number }}
          body: Automated build from ${{ github.sha }}
          files: ./dist/Case-Y-v${{ github.run_number }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
