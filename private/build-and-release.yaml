name: Build EXE & Publish Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if (Test-Path requirements.txt) { pip install -r requirements.txt } else { echo "no requirements.txt" }
          pip install pyinstaller

      - name: Build .exe with PyInstaller
        run: |
          # run PyInstaller in one-file mode; change name as needed
          pyinstaller --onefile --name "Case Y" main.py

      - name: Prepare artifact (zip exe)
        run: |
          # "dist\Case Y.exe" is the typical output on Windows
          if (Test-Path "./dist/Case Y.exe") {
            Compress-Archive -Path "./dist/Case Y.exe" -DestinationPath "./dist/Case Y-v${{ github.run_number }}.zip"
          } else {
            Write-Error "Expected dist/Case Y.exe not found"
          }

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: Automated build from ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset (zip)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/Case Y-v${{ github.run_number }}.zip"
          asset_name: "Case Y-v${{ github.run_number }}.zip"
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
